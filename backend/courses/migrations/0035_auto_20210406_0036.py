# Generated by Django 3.2b1 on 2021-04-06 04:36

import django.core.validators
import django.db.models.expressions
import django.db.models.functions.comparison
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("courses", "0034_auto_20210405_0428"),
    ]

    operations = [
        migrations.RemoveIndex(model_name="section", name="raw_demand",),
        migrations.AlterField(
            model_name="section",
            name="percent_open",
            field=models.FloatField(
                default=0,
                help_text="\nIf this section is from the current semester, this is the percentage (expressed as a\ndecimal number between 0 and 1) of the period between the beginning of its\nadd/drop period and its last status update that this section was open\n(or 0 if it has had no status updates strictly within its add/drop period).\nIf this section is from a previous semester, this is the percentage of its\nwhole add/drop period that it was open.\n",
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(1),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="statusupdate",
            name="percent_through_add_drop_period",
            field=models.FloatField(
                blank=True,
                help_text="The percentage through the add/drop period at which this status update occurred.This percentage is constrained within the range [0,1].",
                null=True,
            ),
        ),
        migrations.AddIndex(
            model_name="section",
            index=models.Index(
                django.db.models.expressions.Case(
                    django.db.models.expressions.When(
                        models.Q(("capacity__isnull", False), ("capacity__gt", 0)),
                        then=django.db.models.expressions.CombinedExpression(
                            django.db.models.functions.comparison.Cast(
                                "registration_volume", models.FloatField()
                            ),
                            "/",
                            django.db.models.functions.comparison.Cast(
                                "capacity", models.FloatField()
                            ),
                        ),
                    ),
                    default=None,
                    output_field=models.FloatField(blank=True, null=True),
                ),
                name="raw_demand",
            ),
        ),
    ]
